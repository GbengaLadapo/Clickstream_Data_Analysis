import io
import time
import random
import json
from google.cloud import storage
import datetime
import csv

project_id = 'clickstream-data-analysis'
bucket_name = 'clickstream_batch_data'
file_prefix = 'clickstream_batch_'
batch_size = 200

actions = ['click', 'scroll', 'hover', 'search', 'add_to_cart', 'checkout', 'watch_video', 'share', 'like', 'comment', 'download']
retail_stores = ['Best Buy', 'Walmart', 'Target', 'Macy\'s', 'Costco', 'Nordstrom']
user_agents = ['Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 Edge/16.16299',
               'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.81 Safari/537.36',
               'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:54.0) Gecko/20100101 Firefox/54.0',
               'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36',
               'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.79 Safari/537.36 Edge/14.14393']

product_names = [
    "T-shirt", "Shoes", "Jeans", "Dress", "Watch", "Bag",
    "TV", "Laptop", "Smartphone", "Tablet", "Headphones", "Camera",
    "Sofa", "Bed", "Dining Table", "Office Chair", "Bookshelf",
    "Patio Set", "Grill", "Outdoor Heater", "Lawn Mower", "Garden Tools",
    "Refrigerator", "Washing Machine", "Dryer", "Dishwasher", "Microwave", "Blender",
    "Necklace", "Earrings", "Bracelet", "Ring"
]
product_numbers = list(range(1050, 1099))

def generate_events(batch_size):
    events = []
    for i in range(batch_size):
        # Generate a random clickstream event
        event = {
            'timestamp': datetime.datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S'),
            'user_id': random.randint(1, 100),
            'action': random.choice(actions),
            'retail_store': random.choice(retail_stores),
            'page': f'/{random.choice(["home", "about", "products", "contact"])}.html',
            'browser': random.choice(['Chrome', 'Firefox', 'Edge', 'Safari']),
            'user_agent': random.choice(user_agents),
            'ip_address': f'{random.randint(1, 255)}.{random.randint(1, 255)}.{random.randint(1, 255)}.{random.randint(1, 255)}',
            'product_name': random.choice(product_names),
            'product_number': random.choice(product_numbers),
            'duration': random.randint(1, 600),  # Duration in seconds
            'clicks': random.randint(1, 20),
            'purchase': random.choice(['yes', 'no']),
            'visit_type': random.choice(['new', 'returning'])
        }
        events.append(event)
    return events


def write_csv_file_to_gcs(bucket_name, file_prefix, events):
    client = storage.Client()
    bucket = client.get_bucket(bucket_name)
    filename = f"{file_prefix}{datetime.datetime.now().strftime('%Y-%m-%d-%H-%M-%S')}.csv"
    blob = bucket.blob(filename)
    output = io.StringIO()
    writer = csv.DictWriter(output, fieldnames=events[0].keys())
    writer.writeheader()
    for event in events:
        writer.writerow(event)
    blob.upload_from_string(output.getvalue(), 'text/csv')
    print(f"File {filename} uploaded to bucket {bucket_name}.")

def generate_and_send_batch_data(request):
    events = generate_events(batch_size)
    write_csv_file_to_gcs(bucket_name, file_prefix, events)
    return f"{len(events)} events generated and sent to Cloud Storage."

if __name__ == "__main__":
    result = generate_and_send_batch_data(None)
    print(result)
